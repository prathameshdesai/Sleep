my.data$PA1MIN_ <- as.numeric(my.data$PA1MIN_)
#clean up SLEPTIM1, values of 77, 99 or missing imputed with median values.  Make numeric After.
SLEPTIM1Good <- subset(my.data$SLEPTIM1, as.numeric(my.data$SLEPTIM1) < 76)
SLEPTIM1Good <- as.numeric(SLEPTIM1Good)
#find median
summary(SLEPTIM1Good)
#impute median of 7 into missing values
for (i in 1:nrow(my.data)){
if(my.data$SLEPTIM1[[i]] == 77 | my.data$SLEPTIM1[[i]] == 99){
my.data$SLEPTIM1[[i]] <- 7
}
}
#make numeric
my.data$SLEPTIM1 <- as.numeric(my.data$SLEPTIM1)
#Clean up MENTHLTH by making values of 88 = 0 and imputing median values for values MISSING, 77, and 99
my.data$MENTHLTH <- as.numeric(my.data$MENTHLTH)
my.data$MENTHLTH[data_say$MENTHLTH==88] <- 0
MENTHLTHGood <- subset(my.data$MENTHLTH, as.numeric(my.data$MENTHLTH) < 76)
MENTHLTHGood <- as.numeric(MENTHLTHGood)
#find avg value
summary(MENTHLTHGood)
#impute avg into missing rows
for (i in 1:nrow(my.data)){
if(my.data$MENTHLTH[[i]] == 77 | my.data$MENTHLTH[[i]] == 99){
my.data$MENTHLTH[[i]] <- 0
}
}
#Clean up PHYSHLTH by making values of 88 = 0 and imputing median values for values MISSING, 77, and 99
my.data$PHYSHLTH <- as.numeric(my.data$PHYSHLTH)
my.data$PHYSHLTH[data_say$PHYSHLTH==88] <- 0
PHYSHLTHGood <- subset(my.data$PHYSHLTH, as.numeric(my.data$PHYSHLTH) < 76)
PHYSHLTHGood <- as.numeric(PHYSHLTHGood)
#find avg value
summary(PHYSHLTHGood)
#impute avg into missing rows
for (i in 1:nrow(my.data)){
if(my.data$PHYSHLTH[[i]] == 77 | my.data$PHYSHLTH[[i]] == 99){
my.data$PHYSHLTH[[i]] <- 0
}
}
#No changes to X_DRD
#Clean Up SLEPDAY1 by imputing median values into MISSING, 77 and 99, setting 88 to zero
my.data$SLEPDAY1 <- as.numeric(my.data$SLEPDAY1)
my.data$SLEPDAY1[data_say$SLEPDAY1==88] <- 0
SLEPDAY1Good <- subset(my.data$SLEPDAY1, as.numeric(my.data$SLEPDAY1) < 76)
SLEPDAY1Good <- as.numeric(SLEPDAY1Good)
#find avg value
summary(SLEPDAY1Good)
#impute median into missing rows
for (i in 1:nrow(my.data)){
if(my.data$SLEPDAY1[[i]] == 77 | my.data$SLEPDAY1[[i]] == 99){
my.data$SLEPDAY1[[i]] <- 0
}
}
library(e1071)
library(caret)
data_idx   = sample(nrow(my.data), 0.8*nrow(my.data))
train = my.data[data_idx, ]
test = my.data[-data_idx, ]
model_nb = naiveBayes(ad_categorical ~ ., data = train)
x_test = test[,1:10]
y_test <- test[,11]
predictions <- predict(model_nb, x_test)
df_nb <- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
library(randomForest)
forest <- randomForest(ad_categorical~.,data = train)
predictions <- predict(forest,x_test)
df_random <- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
library(rpart.plot)
rpart_model <- rpart(ad_categorical~.,data = my.data, method="class")
rpart.plot(rpart_model)
log_reg <- glm(ad_categorical~., data = train, family = "binomial")
fit_logistic <- train(ad_categorical~.,
data = train,
method = "glmnet",
family = "binomial")
predictions <- predict(fit_logistic,x_test)
df_log<- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
varImpPlot(forest,type=2)
library(ROCR)
install.packages(ROCR)
install.packages("ROCR",dep=T)
knitr::opts_chunk$set(echo = TRUE)
library("foreign")
library("dplyr")
library("ggplot2")
knitr::include_graphics("stress.png")
data <- read.xport("LLCP2017.XPT ")
keep <- c("ASNOSLEP", "SLEPTIM1", "ADSLEEP", "SLEPDAY1", "SLEPSNO2", "SLEPBRTH")
Trimmeddata <- mutate(data, noadsleep = is.na(ADSLEEP))
Trimmeddata <- subset(Trimmeddata, noadsleep == FALSE)
Trimmeddata <- Trimmeddata[,-c(length(colnames(Trimmeddata)))]
sleep <- Trimmeddata[ ,keep]
timevdays <- data.frame(sleep[,c(2,3)])
for (i in 1:nrow(timevdays)){
if(!complete.cases(timevdays[1,])){
timevdays[-i,]
}
}
for (i in 1:nrow(timevdays)){
if(timevdays[i,2] == 88){
timevdays[i,2] <- 0
}
}
timevdays <- subset(timevdays, SLEPTIM1 < 76)
timevdays <- subset(timevdays, ADSLEEP < 76)
cor(timevdays)
ggplot(timevdays, aes(SLEPTIM1, ADSLEEP)) +
geom_point()
demokeep <- c("X_STATE","X_IMPRACE","X_AGE_G","SEX","ADSLEEP")
demo <- Trimmeddata[ ,demokeep]
for (i in 1:nrow(demo)){
if(demo[i,5] == 88){
demo[i,5] <- 0
}
}
demo <- subset(demo, ADSLEEP < 76)
summary(demo$ADSLEEP)
hist(demo$ADSLEEP, xlab = "ADSLEEP", main = "Histogram of ADSLEEP")
#mean by state
state <- aggregate(demo$ADSLEEP~demo$X_STATE, FUN=mean)
rownames(state) <- c("AZ", "DC", "MN", "NV", "ND", "OR", "TN")
state
#mean by Race
race <- aggregate(demo$ADSLEEP~demo$X_IMPRACE, FUN=mean)
rownames(race) <- c("White", "Black", "Asian", "American Indian", "Hispanic", "Other")
race
#mean by Sex
sex <- aggregate(demo$ADSLEEP~demo$SEX, FUN=mean)
rownames(sex) <- c("Male","Female","Refused")
sex
#mean by age group
agegroup <- aggregate(demo$ADSLEEP~demo$X_AGE_G, FUN=mean)
rownames(agegroup) <- c("18-24","25-34","35-44","45-54","55-64","65+")
agegroup
keep <- c("X-BMI5CAT","EXERANY2","X_STATE","COLGHOUS","PHYSHLTH","MENTHLTH","BPMEDS","CHOLMED1","JOINPAI1","SEX","EMPLOY1","PREGNANT","PREDIAB1","INSULIN","CVDASPRN","ASNOSLEP","SLEPTIM1","ADSLEEP","SLEPDAY1","SLEPSNO2","SLEPBRTH","MARIJANA","LSATISFY","SDHSTRES","X_IMPRACE","X_MICHD","X_ASTHMS1","X_AGE_G","X_DRDXAR1","X_BMI5CAT","X_CHLDCNT","X_RFSMOK3","X_RFDRHV5","PA1MIN_")
Trimmeddata <- mutate(data, noadsleep = is.na(ADSLEEP))
Trimmeddata <- subset(Trimmeddata, noadsleep == FALSE)
Trimmeddata <- Trimmeddata[,-c(length(colnames(Trimmeddata)))]
data_say <- Trimmeddata[ , (names(Trimmeddata) %in% keep)]
data_say[is.na(data_say)] <- "MISSING"
data_say <- data_say[data_say$ADSLEEP!=77 & data_say$ADSLEEP!=99, ]
data_say$ADSLEEP[data_say$ADSLEEP==88] <- 0
#ad_categorical <- cut(data_say$ADSLEEP, 2, include.lowest=TRUE, labels=c("HighQualitySleep", "LowQualitySleep"))
ad_categorical <- ifelse(data_say$ADSLEEP == 0, "HighQualitySleep", "LowQualitySleep")
data_say <- cbind(data_say, ad_categorical)
#entropy function
entropy <- function(x) {
H <- 0
freq.x <- as.data.frame(table(x))$Freq
if (sum(freq.x) ==0){
H <- 0 # Case shows up when calculating conditional entropies
return (H)
}
p <- freq.x/sum(freq.x)
p <- p[p > 0] # Discard zero entries (because 0 log 0 = 0)
H= -sum(p*log2(p))
return(H)
}
#information gain function
info.gain <- function(x,y){
x <- as.factor(x)
y <- as.factor(y)
freq.class <- as.data.frame(table(y))$Freq
ent_y =0
ent_class = entropy(y)
pii= sum(freq.class)
for (i in 1:length(levels(x))){
mask = x == levels(x)[i]
temp = y[mask]
freq.x <- as.data.frame(table(temp))$Freq
ig <- entropy(temp)
pi = sum(freq.x)
ent_y = ent_y + ((ig * (pi)/pii))
}
IG <- ent_class - ent_y
return(IG)
}
#list for information gain
list <- c()
list1 <- c()
list2 <- c()
for (i in 1:ncol(data_say)){
list[[i]] <- colnames(data_say)[[i]]
list1[[i]] <- info.gain(data_say[,i],data_say$ADSLEEP)
list2[i] <- colnames(data_say)[i]
}
data_ig<- do.call(rbind, Map(data.frame,"info gain"=list1 , "name of variable"=list2))
data_ig<- data_ig[order(-data_ig$info.gain),]
data_for_regresiion <- head(data_ig,12)['name.of.variable']
data_for_regresiion
name1 <- c('PA1MIN_','SLEPTIM1','MENTHLTH','PHYSHLTH','X_DRDXAR1','SDHSTRES','SLEPDAY1','JOINPAI1','EMPLOY1','LSATISFY','ad_categorical')
my.data <- data_say[name1]
my.data[,name1] <- lapply(my.data[,name1] , factor)
#clean up PA1MIN_ this data should be numeric, no missing values to impute.
my.data$PA1MIN_ <- as.numeric(my.data$PA1MIN_)
#clean up SLEPTIM1, values of 77, 99 or missing imputed with median values.  Make numeric After.
SLEPTIM1Good <- subset(my.data$SLEPTIM1, as.numeric(my.data$SLEPTIM1) < 76)
SLEPTIM1Good <- as.numeric(SLEPTIM1Good)
#find median
summary(SLEPTIM1Good)
#impute median of 7 into missing values
for (i in 1:nrow(my.data)){
if(my.data$SLEPTIM1[[i]] == 77 | my.data$SLEPTIM1[[i]] == 99){
my.data$SLEPTIM1[[i]] <- 7
}
}
#make numeric
my.data$SLEPTIM1 <- as.numeric(my.data$SLEPTIM1)
#Clean up MENTHLTH by making values of 88 = 0 and imputing median values for values MISSING, 77, and 99
my.data$MENTHLTH <- as.numeric(my.data$MENTHLTH)
my.data$MENTHLTH[data_say$MENTHLTH==88] <- 0
MENTHLTHGood <- subset(my.data$MENTHLTH, as.numeric(my.data$MENTHLTH) < 76)
MENTHLTHGood <- as.numeric(MENTHLTHGood)
#find avg value
summary(MENTHLTHGood)
#impute avg into missing rows
for (i in 1:nrow(my.data)){
if(my.data$MENTHLTH[[i]] == 77 | my.data$MENTHLTH[[i]] == 99){
my.data$MENTHLTH[[i]] <- 0
}
}
#Clean up PHYSHLTH by making values of 88 = 0 and imputing median values for values MISSING, 77, and 99
my.data$PHYSHLTH <- as.numeric(my.data$PHYSHLTH)
my.data$PHYSHLTH[data_say$PHYSHLTH==88] <- 0
PHYSHLTHGood <- subset(my.data$PHYSHLTH, as.numeric(my.data$PHYSHLTH) < 76)
PHYSHLTHGood <- as.numeric(PHYSHLTHGood)
#find avg value
summary(PHYSHLTHGood)
#impute avg into missing rows
for (i in 1:nrow(my.data)){
if(my.data$PHYSHLTH[[i]] == 77 | my.data$PHYSHLTH[[i]] == 99){
my.data$PHYSHLTH[[i]] <- 0
}
}
#No changes to X_DRD
#Clean Up SLEPDAY1 by imputing median values into MISSING, 77 and 99, setting 88 to zero
my.data$SLEPDAY1 <- as.numeric(my.data$SLEPDAY1)
my.data$SLEPDAY1[data_say$SLEPDAY1==88] <- 0
SLEPDAY1Good <- subset(my.data$SLEPDAY1, as.numeric(my.data$SLEPDAY1) < 76)
SLEPDAY1Good <- as.numeric(SLEPDAY1Good)
#find avg value
summary(SLEPDAY1Good)
#impute median into missing rows
for (i in 1:nrow(my.data)){
if(my.data$SLEPDAY1[[i]] == 77 | my.data$SLEPDAY1[[i]] == 99){
my.data$SLEPDAY1[[i]] <- 0
}
}
library(e1071)
library(caret)
data_idx   = sample(nrow(my.data), 0.8*nrow(my.data))
train = my.data[data_idx, ]
test = my.data[-data_idx, ]
model_nb = naiveBayes(ad_categorical ~ ., data = train)
x_test = test[,1:10]
y_test <- test[,11]
predictions <- predict(model_nb, x_test)
df_nb <- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
library(randomForest)
forest <- randomForest(ad_categorical~.,data = train)
predictions <- predict(forest,x_test)
df_random <- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
library(rpart.plot)
rpart_model <- rpart(ad_categorical~.,data = my.data, method="class")
rpart.plot(rpart_model)
log_reg <- glm(ad_categorical~., data = train, family = "binomial")
fit_logistic <- train(ad_categorical~.,
data = train,
method = "glmnet",
family = "binomial")
predictions <- predict(fit_logistic,x_test)
df_log<- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
varImpPlot(forest,type=2)
library(ROCR)
df_constant <- ifelse(y_test=="HighQualitySleep",1,0)
pred_log = prediction(df_log, df_constant)
pred_nb = prediction(df_nb, df_constant)
pred_random = prediction(df_random, df_constant)
roc_log = performance(pred_log, measure="tpr", x.measure="fpr")
roc_nb =  performance(pred_nb, measure="tpr", x.measure="fpr")
roc_random = performance(pred_random, measure="tpr", x.measure="fpr")
plot(roc_log, col="orange", lwd=2)
plot(roc_nb, add=TRUE, col='red')
plot(roc_random, add=TRUE, col='green')
legend("topleft", legend=c("RANDOM FOREST", "NAIVE BAYES","LOG REGRESSION"),
col=c("green", "red","orange"), lty=1:2)
setwd('C:/Users/psdes/Documents/DM_PROJECT')
knitr::opts_chunk$set(echo = TRUE)
library("foreign")
library("dplyr")
library("ggplot2")
library("knitr")
include_graphics("CommonSleepTime.png")
include_graphics("stress.png")
include_graphics("LifeSat.png")
include_graphics("SleepGender1.png")
include_graphics("QualityGender.png")
include_graphics("AvgSleepVsEmployment.png")
include_graphics("AvgSleepVsMentalHealth.png")
library("foreign")
library("dplyr")
library("ggplot2")
data <- read.xport("LLCP2017.XPT ")
keep <- c("ASNOSLEP", "SLEPTIM1", "ADSLEEP", "SLEPDAY1", "SLEPSNO2", "SLEPBRTH")
Trimmeddata <- mutate(data, noadsleep = is.na(ADSLEEP))
Trimmeddata <- subset(Trimmeddata, noadsleep == FALSE)
Trimmeddata <- Trimmeddata[,-c(length(colnames(Trimmeddata)))]
sleep <- Trimmeddata[ ,keep]
timevdays <- data.frame(sleep[,c(2,3)])
for (i in 1:nrow(timevdays)){
if(!complete.cases(timevdays[1,])){
timevdays[-i,]
}
}
for (i in 1:nrow(timevdays)){
if(timevdays[i,2] == 88){
timevdays[i,2] <- 0
}
}
timevdays <- subset(timevdays, SLEPTIM1 < 76)
timevdays <- subset(timevdays, ADSLEEP < 76)
cor(timevdays)
ggplot(timevdays, aes(SLEPTIM1, ADSLEEP)) +
geom_point()
demokeep <- c("X_STATE","X_IMPRACE","X_AGE_G","SEX","ADSLEEP")
demo <- Trimmeddata[ ,demokeep]
for (i in 1:nrow(demo)){
if(demo[i,5] == 88){
demo[i,5] <- 0
}
}
demo <- subset(demo, ADSLEEP < 76)
summary(demo$ADSLEEP)
hist(demo$ADSLEEP, xlab = "ADSLEEP", main = "Histogram of ADSLEEP")
#mean by state
state <- aggregate(demo$ADSLEEP~demo$X_STATE, FUN=mean)
rownames(state) <- c("AZ", "DC", "MN", "NV", "ND", "OR", "TN")
state
#mean by Race
race <- aggregate(demo$ADSLEEP~demo$X_IMPRACE, FUN=mean)
rownames(race) <- c("White", "Black", "Asian", "American Indian", "Hispanic", "Other")
race
#mean by Sex
sex <- aggregate(demo$ADSLEEP~demo$SEX, FUN=mean)
rownames(sex) <- c("Male","Female","Refused")
sex
#mean by age group
agegroup <- aggregate(demo$ADSLEEP~demo$X_AGE_G, FUN=mean)
rownames(agegroup) <- c("18-24","25-34","35-44","45-54","55-64","65+")
agegroup
keep <- c("X-BMI5CAT","EXERANY2","X_STATE","COLGHOUS","PHYSHLTH","MENTHLTH","BPMEDS","CHOLMED1","JOINPAI1","SEX","EMPLOY1","PREGNANT","PREDIAB1","INSULIN","CVDASPRN","ASNOSLEP","SLEPTIM1","ADSLEEP","SLEPDAY1","SLEPSNO2","SLEPBRTH","MARIJANA","LSATISFY","SDHSTRES","X_IMPRACE","X_MICHD","X_ASTHMS1","X_AGE_G","X_DRDXAR1","X_BMI5CAT","X_CHLDCNT","X_RFSMOK3","X_RFDRHV5","PA1MIN_")
Trimmeddata <- mutate(data, noadsleep = is.na(ADSLEEP))
Trimmeddata <- subset(Trimmeddata, noadsleep == FALSE)
Trimmeddata <- Trimmeddata[,-c(length(colnames(Trimmeddata)))]
data_say <- Trimmeddata[ , (names(Trimmeddata) %in% keep)]
data_say[is.na(data_say)] <- "MISSING"
data_say <- data_say[data_say$ADSLEEP!=77 & data_say$ADSLEEP!=99, ]
data_say$ADSLEEP[data_say$ADSLEEP==88] <- 0
#ad_categorical <- cut(data_say$ADSLEEP, 2, include.lowest=TRUE, labels=c("HighQualitySleep", "LowQualitySleep"))
ad_categorical <- ifelse(data_say$ADSLEEP == 0, "HighQualitySleep", "LowQualitySleep")
data_say <- cbind(data_say, ad_categorical)
#entropy function
entropy <- function(x) {
H <- 0
freq.x <- as.data.frame(table(x))$Freq
if (sum(freq.x) ==0){
H <- 0 # Case shows up when calculating conditional entropies
return (H)
}
p <- freq.x/sum(freq.x)
p <- p[p > 0] # Discard zero entries (because 0 log 0 = 0)
H= -sum(p*log2(p))
return(H)
}
#information gain function
info.gain <- function(x,y){
x <- as.factor(x)
y <- as.factor(y)
freq.class <- as.data.frame(table(y))$Freq
ent_y =0
ent_class = entropy(y)
pii= sum(freq.class)
for (i in 1:length(levels(x))){
mask = x == levels(x)[i]
temp = y[mask]
freq.x <- as.data.frame(table(temp))$Freq
ig <- entropy(temp)
pi = sum(freq.x)
ent_y = ent_y + ((ig * (pi)/pii))
}
IG <- ent_class - ent_y
return(IG)
}
#list for information gain
list <- c()
list1 <- c()
list2 <- c()
for (i in 1:ncol(data_say)){
list[[i]] <- colnames(data_say)[[i]]
list1[[i]] <- info.gain(data_say[,i],data_say$ADSLEEP)
list2[i] <- colnames(data_say)[i]
}
data_ig<- do.call(rbind, Map(data.frame,"info gain"=list1 , "name of variable"=list2))
data_ig<- data_ig[order(-data_ig$info.gain),]
data_for_regresiion <- head(data_ig,12)['name.of.variable']
data_for_regresiion
name1 <- c('PA1MIN_','SLEPTIM1','MENTHLTH','PHYSHLTH','X_DRDXAR1','SDHSTRES','SLEPDAY1','JOINPAI1','EMPLOY1','LSATISFY','ad_categorical')
my.data <- data_say[name1]
my.data[,name1] <- lapply(my.data[,name1] , factor)
#clean up PA1MIN_ this data should be numeric, no missing values to impute.
my.data$PA1MIN_ <- as.numeric(my.data$PA1MIN_)
#clean up SLEPTIM1, values of 77, 99 or missing imputed with median values.  Make numeric After.
SLEPTIM1Good <- subset(my.data$SLEPTIM1, as.numeric(my.data$SLEPTIM1) < 76)
SLEPTIM1Good <- as.numeric(SLEPTIM1Good)
#find median
summary(SLEPTIM1Good)
#impute median of 7 into missing values
for (i in 1:nrow(my.data)){
if(my.data$SLEPTIM1[[i]] == 77 | my.data$SLEPTIM1[[i]] == 99){
my.data$SLEPTIM1[[i]] <- 7
}
}
#make numeric
my.data$SLEPTIM1 <- as.numeric(my.data$SLEPTIM1)
#Clean up MENTHLTH by making values of 88 = 0 and imputing median values for values MISSING, 77, and 99
my.data$MENTHLTH <- as.numeric(my.data$MENTHLTH)
my.data$MENTHLTH[data_say$MENTHLTH==88] <- 0
MENTHLTHGood <- subset(my.data$MENTHLTH, as.numeric(my.data$MENTHLTH) < 76)
MENTHLTHGood <- as.numeric(MENTHLTHGood)
#find avg value
summary(MENTHLTHGood)
#impute avg into missing rows
for (i in 1:nrow(my.data)){
if(my.data$MENTHLTH[[i]] == 77 | my.data$MENTHLTH[[i]] == 99){
my.data$MENTHLTH[[i]] <- 0
}
}
#Clean up PHYSHLTH by making values of 88 = 0 and imputing median values for values MISSING, 77, and 99
my.data$PHYSHLTH <- as.numeric(my.data$PHYSHLTH)
my.data$PHYSHLTH[data_say$PHYSHLTH==88] <- 0
PHYSHLTHGood <- subset(my.data$PHYSHLTH, as.numeric(my.data$PHYSHLTH) < 76)
PHYSHLTHGood <- as.numeric(PHYSHLTHGood)
#find avg value
summary(PHYSHLTHGood)
#impute avg into missing rows
for (i in 1:nrow(my.data)){
if(my.data$PHYSHLTH[[i]] == 77 | my.data$PHYSHLTH[[i]] == 99){
my.data$PHYSHLTH[[i]] <- 0
}
}
#No changes to X_DRD
#Clean Up SLEPDAY1 by imputing median values into MISSING, 77 and 99, setting 88 to zero
my.data$SLEPDAY1 <- as.numeric(my.data$SLEPDAY1)
my.data$SLEPDAY1[data_say$SLEPDAY1==88] <- 0
SLEPDAY1Good <- subset(my.data$SLEPDAY1, as.numeric(my.data$SLEPDAY1) < 76)
SLEPDAY1Good <- as.numeric(SLEPDAY1Good)
#find avg value
summary(SLEPDAY1Good)
#impute median into missing rows
for (i in 1:nrow(my.data)){
if(my.data$SLEPDAY1[[i]] == 77 | my.data$SLEPDAY1[[i]] == 99){
my.data$SLEPDAY1[[i]] <- 0
}
}
library(e1071)
library(caret)
data_idx   = sample(nrow(my.data), 0.8*nrow(my.data))
train = my.data[data_idx, ]
test = my.data[-data_idx, ]
model_nb = naiveBayes(ad_categorical ~ ., data = train)
x_test = test[,1:10]
y_test <- test[,11]
predictions <- predict(model_nb, x_test)
df_nb <- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
library(randomForest)
forest <- randomForest(ad_categorical~.,data = train)
predictions <- predict(forest,x_test)
df_random <- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
library(rpart.plot)
rpart_model <- rpart(ad_categorical~.,data = my.data, method="class")
rpart.plot(rpart_model)
log_reg <- glm(ad_categorical~., data = train, family = "binomial")
fit_logistic <- train(ad_categorical~.,
data = train,
method = "glmnet",
family = "binomial")
predictions <- predict(fit_logistic,x_test)
df_log<- ifelse(predictions=="HighQualitySleep",1,0)
confusionMatrix(predictions, y_test)
varImpPlot(forest,type=2)
library(ROCR)
df_constant <- ifelse(y_test=="HighQualitySleep",1,0)
pred_log = prediction(df_log, df_constant)
pred_nb = prediction(df_nb, df_constant)
pred_random = prediction(df_random, df_constant)
roc_log = performance(pred_log, measure="tpr", x.measure="fpr")
roc_nb =  performance(pred_nb, measure="tpr", x.measure="fpr")
roc_random = performance(pred_random, measure="tpr", x.measure="fpr")
plot(roc_log, col="orange", lwd=2)
plot(roc_nb, add=TRUE, col='red')
plot(roc_random, add=TRUE, col='green')
legend("topleft", legend=c("RANDOM FOREST", "NAIVE BAYES","LOG REGRESSION"),
col=c("green", "red","orange"), lty=1:2)
